Python is a widely used general-purpose, high-level programming language.Its design philosophy emphasizes code readability, and  its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C.The language provides constructs intended to enable clear programs on both a small and large scale.

Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.

Using third-party tools, such as Py2exe or Pyinstaller,Python code can be packaged into standalone executable programs. Python interpreters are available for many operating systems.

THINK LIKE A CS PYTHON



As an educator, researcher, and book author, I am delighted to see the com-
pletion of this book. Python is a fun and extremely easy-to-use programming
language that has steadily gained in popularity over the last few years. De-
veloped over ten years ago by Guido van Rossum, Python’s simple syntax and
overall feel is largely derived from ABC, a teaching language that was developed
in the 1980’s. However, Python was also created to solve real problems and it
borrows a wide variety of features from programming languages such as C++,
Java, Modula-3, and Scheme. Because of this, one of Python’s most remark-
able features is its broad appeal to professional software developers, scientists,
researchers, artists, and educators.
Despite Python’s appeal to many different communities, you may still wonder
“why Python?” or “why teach programming with Python?” Answering these
questions is no simple task—especially when popular opinion is on the side of
more masochistic alternatives such as C++ and Java. However, I think the
most direct answer is that programming in Python is simply a lot of fun and
more productive.
When I teach computer science courses, I want to cover important concepts
in addition to making the material interesting and engaging to students. Un-
fortunately, there is a tendency for introductory programming courses to focus
far too much attention on mathematical abstraction and for students to be-
come frustrated with annoying problems related to low-level details of syntax,
compilation, and the enforcement of seemingly arcane rules. Although such
abstraction and formalism is important to professional software engineers and
students who plan to continue their study of computer science, taking such an
approach in an introductory course mostly succeeds in making computer sci-
ence boring. When I teach a course, I don’t want to have a room of uninspired
students. I would much rather see them trying to solve interesting problems by
exploring different ideas, taking unconventional approaches, breaking the rules,vi
Foreword
and learning from their mistakes. In doing so, I don’t want to waste half of
the semester trying to sort out obscure syntax problems, unintelligible compiler
error messages, or the several hundred ways that a program might generate a
general protection fault.
One of the reasons why I like Python is that it provides a really nice balance
between the practical and the conceptual. Since Python is interpreted, begin-
ners can pick up the language and start doing neat things almost immediately
without getting lost in the problems of compilation and linking. Furthermore,
Python comes with a large library of modules that can be used to do all sorts
of tasks ranging from web-programming to graphics. Having such a practical
focus is a great way to engage students and it allows them to complete signif-
icant projects. However, Python can also serve as an excellent foundation for
introducing important computer science concepts. Since Python fully supports
procedures and classes, students can be gradually introduced to topics such as
procedural abstraction, data structures, and object-oriented programming—all
of which are applicable to later courses on Java or C++. Python even borrows a
number of features from functional programming languages and can be used to
introduce concepts that would be covered in more detail in courses on Scheme
and Lisp.
In reading Jeffrey’s preface, I am struck by his comments that Python allowed
him to see a “higher level of success and a lower level of frustration” and that he
was able to “move faster with better results.” Although these comments refer to
his introductory course, I sometimes use Python for these exact same reasons in
advanced graduate level computer science courses at the University of Chicago.
In these courses, I am constantly faced with the daunting task of covering a
lot of difficult course material in a blistering nine week quarter. Although it
is certainly possible for me to inflict a lot of pain and suffering by using a
language like C++, I have often found this approach to be counterproductive—
especially when the course is about a topic unrelated to just “programming.” I
find that using Python allows me to better focus on the actual topic at hand
while allowing students to complete substantial class projects.
Although Python is still a young and evolving language, I believe that it has a
bright future in education. This book is an important step in that direction.
David Beazley
University of Chicago
Author of the Python Essential ReferencePreface
By Jeff Elkner
This book owes its existence to the collaboration made possible by the Internet
and the free software movement. Its three authors—a college professor, a high
school teacher, and a professional programmer—have yet to meet face to face,
but we have been able to work closely together and have been aided by many
wonderful folks who have donated their time and energy to helping make this
book better.
We think this book is a testament to the benefits and future possibilities of this
kind of collaboration, the framework for which has been put in place by Richard
Stallman and the Free Software Foundation.
How and why I came to use Python
In 1999, the College Board’s Advanced Placement (AP) Computer Science exam
was given in C++ for the first time. As in many high schools throughout the
country, the decision to change languages had a direct impact on the computer
science curriculum at Yorktown High School in Arlington, Virginia, where I
teach. Up to this point, Pascal was the language of instruction in both our
first-year and AP courses. In keeping with past practice of giving students two
years of exposure to the same language, we made the decision to switch to C++
in the first-year course for the 1997-98 school year so that we would be in step
with the College Board’s change for the AP course the following year.
Two years later, I was convinced that C++ was a poor choice to use for in-
troducing students to computer science. While it is certainly a very powerful
programming language, it is also an extremely difficult language to learn and
teach. I found myself constantly fighting with C++’s difficult syntax and mul-
tiple ways of doing things, and I was losing many students unnecessarily as aviii
Preface
result. Convinced there had to be a better language choice for our first-year
class, I went looking for an alternative to C++.
I needed a language that would run on the machines in our Linux lab as well as
on the Windows and Macintosh platforms most students have at home. I wanted
it to be free and available electronically, so that students could use it at home
regardless of their income. I wanted a language that was used by professional
programmers, and one that had an active developer community around it. It
had to support both procedural and object-oriented programming. And most
importantly, it had to be easy to learn and teach. When I investigated the
choices with these goals in mind, Python stood out as the best candidate for
the job.
I asked one of Yorktown’s talented students, Matt Ahrens, to give Python a
try. In two months he not only learned the language but wrote an application
called pyTicket that enabled our staff to report technology problems via the
Web. I knew that Matt could not have finished an application of that scale
in so short a time in C++, and this accomplishment, combined with Matt’s
positive assessment of Python, suggested that Python was the solution I was
looking for.
Finding a textbook
Having decided to use Python in both of my introductory computer science
classes the following year, the most pressing problem was the lack of an available
textbook.
Free content came to the rescue. Earlier in the year, Richard Stallman had
introduced me to Allen Downey. Both of us had written to Richard expressing
an interest in developing free educational content. Allen had already written a
first-year computer science textbook, How to Think Like a Computer Scientist.
When I read this book, I knew immediately that I wanted to use it in my
class. It was the clearest and most helpful computer science text I had seen. It
emphasized the processes of thought involved in programming rather than the
features of a particular language. Reading it immediately made me a better
teacher.
How to Think Like a Computer Scientist was not just an excellent book, but it
had been released under a GNU public license, which meant it could be used
freely and modified to meet the needs of its user. Once I decided to use Python,
it occurred to me that I could translate Allen’s original Java version of the book
into the new language. While I would not have been able to write a textbook
on my own, having Allen’s book to work from made it possible for me to do so,ix
at the same time demonstrating that the cooperative development model used
so well in software could also work for educational content.
Working on this book for the last two years has been rewarding for both my
students and me, and my students played a big part in the process. Since I
could make instant changes whenever someone found a spelling error or difficult
passage, I encouraged them to look for mistakes in the book by giving them a
bonus point each time they made a suggestion that resulted in a change in the
text. This had the double benefit of encouraging them to read the text more
carefully and of getting the text thoroughly reviewed by its most important
critics, students using it to learn computer science.
For the second half of the book on object-oriented programming, I knew that
someone with more real programming experience than I had would be needed
to do it right. The book sat in an unfinished state for the better part of a year
until the free software community once again provided the needed means for its
completion.
I received an email from Chris Meyers expressing interest in the book. Chris is a
professional programmer who started teaching a programming course last year
using Python at Lane Community College in Eugene, Oregon. The prospect
of teaching the course had led Chris to the book, and he started helping out
with it immediately. By the end of the school year he had created a companion
project on our Website at http://www.ibiblio.org/obp called Python for Fun
and was working with some of my most advanced students as a master teacher,
guiding them beyond where I could take them.

